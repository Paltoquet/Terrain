////////////////////////////////////////////////////////////////////////////////
// Filename: terrain.ps
////////////////////////////////////////////////////////////////////////////////


Texture2D shaderTexture : register(t0);
Texture2D normalTexture : register(t1);
Texture2D normalTexture2 : register(t2);

SamplerState SampleType : register(s0);

cbuffer LightBuffer
{
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float3 tangent : TANGENT;
    float3 binormal : BINORMAL;
    float4 color : COLOR;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
	float slope;
    float4 textureColor1, textureColor2;
    float3 lightDir;
	float4 bumpMap;
    float3 bumpNormal;
    float lightIntensity;
	float4 material1;
    float4 material2;
    float blendAmount;
    float4 color;


	// Calculate the slope of this point.
    slope = 1.0f - input.normal.y;

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor1 = shaderTexture.Sample(SampleType, input.tex);
	// Calculate the amount of light on this pixel using the normal map.
    bumpMap = normalTexture.Sample(SampleType, input.tex);
    bumpMap = (bumpMap * 2.0f) - 1.0f;
    bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
    bumpNormal = normalize(bumpNormal);
    lightIntensity = saturate(dot(bumpNormal, lightDir));
	material1 = saturate(textureColor1 * lightIntensity);

	    // Setup the second material.
    textureColor2 = float4(1.0f, 1.0f, 1.0f, 1.0f);  // Snow color.
    bumpMap = normalTexture2.Sample(SampleType, input.tex);
    bumpMap = (bumpMap * 2.0f) - 1.0f;
    bumpNormal = (bumpMap.x * input.tangent) + (bumpMap.y * input.binormal) + (bumpMap.z * input.normal);
    bumpNormal = normalize(bumpNormal);
    lightIntensity = saturate(dot(bumpNormal, lightDir));
    material2 = saturate(textureColor2 * lightIntensity);

    // Determine which material to use based on slope.
    if(slope < 0.2)
    {
        blendAmount = slope / 0.2f;
        color = lerp(material2, material1, blendAmount);
    }
    if(slope >= 0.2) 
    {
        color = material1;
    }


    // Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
    // color = saturate(diffuseColor * lightIntensity);

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    // color = lightIntensity * input.color; //color * textureColor;

    return color;
}